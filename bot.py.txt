# filename: bot.py

import json
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

TOKEN = "PASTE_YOUR_TOKEN_HERE"

QUESTIONS = [
    "1Ô∏è‚É£ –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ? (–§–∞–∫—Ç)",
    "2Ô∏è‚É£ –ö–∞–∫ —ç—Ç–æ –ø–æ–¥–∞—ë—Ç—Å—è –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ? (–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è)",
    "3Ô∏è‚É£ –ö–æ–º—É —ç—Ç–æ –≤—ã–≥–æ–¥–Ω–æ? (–ö–ª–∞—Å—Å–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)",
    "4Ô∏è‚É£ –û —á—ë–º —É–º–∞–ª—á–∏–≤–∞—é—Ç? (–ú–æ–ª—á–∞–Ω–∏–µ)",
    "5Ô∏è‚É£ –ö–∞–∫–æ–≤—ã –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã? (–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ)",
    "6Ô∏è‚É£ –ó–∞—á–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ? (–¶–µ–ª—å, —Ç–µ–ª–µ–æ–ª–æ–≥–∏—è)",
    "7Ô∏è‚É£ –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è —Ç—Ä–∞–∫—Ç–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è?",
]

STATE = range(7)
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /analyze —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–∏.")

async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id] = []
    await update.message.reply_text(QUESTIONS[0])
    return STATE[0]

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    step = len(user_data[cid])
    user_data[cid].append(update.message.text)

    if step + 1 < len(QUESTIONS):
        await update.message.reply_text(QUESTIONS[step + 1])
        return STATE[step + 1]
    else:
        # –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        summary = "\n".join([f"{QUESTIONS[i]}\n{user_data[cid][i]}" for i in range(7)])
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(f"analysis_{cid}.json", "a", encoding="utf-8") as f:
            json.dump({"user": cid, "answers": user_data[cid]}, f, ensure_ascii=False)
            f.write("\n")

        await update.message.reply_text("üìù –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ–π –∞–Ω–∞–ª–∏–∑:\n\n" + summary)
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("analyze", analyze)],
        states={STATE[i]: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)] for i in range(7)},
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()