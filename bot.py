# filename: bot.py

import json
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

TOKEN = "PASTE_YOUR_TOKEN_HERE"

QUESTIONS = [
    "1Ô∏è‚É£ –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ? (–§–∞–∫—Ç)",
    "2Ô∏è‚É£ –ö–∞–∫ —ç—Ç–æ –ø–æ–¥–∞—ë—Ç—Å—è –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ? (–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è)",
    "3Ô∏è‚É£ –ö–æ–º—É —ç—Ç–æ –≤—ã–≥–æ–¥–Ω–æ? (–ö–ª–∞—Å—Å–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)",
    "4Ô∏è‚É£ –û —á—ë–º —É–º–∞–ª—á–∏–≤–∞—é—Ç? (–ú–æ–ª—á–∞–Ω–∏–µ)",
    "5Ô∏è‚É£ –ö–∞–∫–æ–≤—ã –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã? (–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ)",
    "6Ô∏è‚É£ –ó–∞—á–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ? (–¶–µ–ª—å, —Ç–µ–ª–µ–æ–ª–æ–≥–∏—è)",
    "7Ô∏è‚É£ –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è —Ç—Ä–∞–∫—Ç–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è?",
]

STATE = range(7)
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /analyze —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–∏.")

async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id] = []
    await update.message.reply_text(QUESTIONS[0])
    return STATE[0]

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    step = len(user_data[cid])
    user_data[cid].append(update.message.text)

    if step + 1 < len(QUESTIONS):
        await update.message.reply_text(QUESTIONS[step + 1])
        return STATE[step + 1]
    else:
        # –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        summary = "\n".join([f"{QUESTIONS[i]}\n{user_data[cid][i]}" for i in range(7)])
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(f"analysis_{cid}.json", "a", encoding="utf-8") as f:
            json.dump({"user": cid, "answers": user_data[cid]}, f, ensure_ascii=False)
            f.write("\n")

        await update.message.reply_text("üìù –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ–π –∞–Ω–∞–ª–∏–∑:\n\n" + summary)
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("analyze", analyze)],
        states={STATE[i]: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)] for i in range(7)},
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()

import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã Railway
TOKEN = os.environ.get("TOKEN")

# –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞
ANALYSIS_SCHEMA = """
üîß –®–∞–±–ª–æ–Ω –ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏

1. **–§–∞–∫—Ç (–±—ã—Ç–∏–µ)**  
–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –±–µ–∑ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏?  
–ü—Ä–∏–º–µ—Ä: ¬´–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –ø–æ–≤—ã—Å–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –Ω–∞ 1%.¬ª

2. **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è (–Ω–∞–¥—Å—Ç—Ä–æ–π–∫–∞)**  
–ö–∞–∫ —ç—Ç–æ –ø–æ–¥–∞—ë—Ç—Å—è –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ? –ö–∞–∫–∏–µ –ø—Ä–∏—á–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω—ã? –ö–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è?  
–ü—Ä–∏–º–µ—Ä: ¬´–î–ª—è —Å–¥–µ—Ä–∂–∏–≤–∞–Ω–∏—è –∏–Ω—Ñ–ª—è—Ü–∏–∏ –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è –∫ —Ä—É–±–ª—é.¬ª

3. **–ö–ª–∞—Å—Å–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è**  
–ö–æ–º—É –≤—ã–≥–æ–¥–Ω–∞ —Ç–∞–∫–∞—è –ø–æ–¥–∞—á–∞? –ß—å–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ?  
–ü—Ä–∏–º–µ—Ä: –£–∫—Ä–µ–ø–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –±—É—Ä–∂—É–∞–∑–∏–∏, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ ¬´–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏¬ª –∞–Ω—Ç–∏–Ω–∞—Ä–æ–¥–Ω–æ–π –º–µ—Ä—ã.

4. **–ú–æ–ª—á–∞–Ω–∏–µ (—á—Ç–æ —Å–∫—Ä—ã—Ç–æ?)**  
–û —á—ë–º –Ω–µ —Å–∫–∞–∑–∞–Ω–æ? –ö–∞–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ —É–ø—É—â–µ–Ω—ã?  
–ü—Ä–∏–º–µ—Ä: –ù–µ —É–ø–æ–º—è–Ω—É—Ç–æ, –∫–∞–∫ —Ä–æ—Å—Ç —Å—Ç–∞–≤–∫–∏ —É–¥–∞—Ä–∏—Ç –ø–æ –∑–∞–µ–º—â–∏–∫–∞–º, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É, –ñ–ö–•.

5. **–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–æ–ø–ª—ë–∫–∞**  
–ö–∞–∫–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –ª–µ–∂–∞—Ç –≤ –æ—Å–Ω–æ–≤–µ —è–≤–ª–µ–Ω–∏—è?  
–ü—Ä–∏–º–µ—Ä: –ò–Ω—Ñ–ª—è—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ —Ä–æ—Å—Ç–æ–º –∏–∑–¥–µ—Ä–∂–µ–∫ –∏ –º–æ–Ω–æ–ø–æ–ª–∏–∑–∞—Ü–∏–µ–π, –∞ –Ω–µ ¬´–ø–∞–Ω–∏–∫–æ–π¬ª.

6. **–¶–µ–ª—å (—Ç–µ–ª–µ–æ–ª–æ–≥–∏—è)**  
–ó–∞—á–µ–º –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ? –ß—Ç–æ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑–≤–∞—Ç—å?  
–ü—Ä–∏–º–µ—Ä: –°–Ω–∏–∑–∏—Ç—å –≤–æ–∑–º—É—â–µ–Ω–∏–µ, –≤–Ω—É—à–∏—Ç—å —Ñ–∞—Ç–∞–ª–∏–∑–º, –æ–ø—Ä–∞–≤–¥–∞—Ç—å –±—É—Ä–∂—É–∞–∑–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É.

7. **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è (–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è) —Ç—Ä–∞–∫—Ç–æ–≤–∫–∞**  
–ö–∞–∫ –±—ã –≤—ã–≥–ª—è–¥–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã –µ–≥–æ –ø–∏—Å–∞–ª–∏ —Å –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–ª–∞—Å—Å–∞?  
–ü—Ä–∏–º–µ—Ä: ¬´–¶–ë –ø–µ—Ä–µ–ª–æ–∂–∏–ª –∏–Ω—Ñ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏ –Ω–∞ —Ç—Ä—É–¥—è—â–∏—Ö—Å—è, —á—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏ —Å–ø–µ–∫—É–ª—è—Ç–∏–≤–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª.¬ª
"""

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /schema —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /schema
async def schema(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(ANALYSIS_SCHEMA, parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("schema", schema))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
